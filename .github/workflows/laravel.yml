name: Laravel CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  laravel-tests:
    runs-on: ubuntu-latest  # You can use ubuntu-latest if a large runner is not necessary

    steps:
    # Step 1: Set up PHP 8.2 (required for Laravel 11)
    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, bcmath, sqlite, pdo

    # Step 2: Check out the repository code
    - uses: actions/checkout@v4

    # Step 3: Cache Composer dependencies for faster builds
    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: vendor
        key: composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          composer-

    # Step 4: Cache NPM dependencies for faster builds
    - name: Cache NPM dependencies
      uses: actions/cache@v3
      with:
        path: node_modules
        key: npm-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          npm-

    # Step 5: Copy .env.example to .env if .env doesn't exist
    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"

    # Step 6: Install Composer dependencies
    - name: Install Composer dependencies
      run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    # Step 7: Install NPM dependencies
    - name: Install NPM dependencies
      run: npm install

    # Step 8: Run NPM build (for assets)
    - name: Run NPM build
      run: npm run build

    # Step 9: Create SQLite Database
    - name: Create SQLite Database
      run: |
        mkdir -p ${{ github.workspace }}/database
        touch ${{ github.workspace }}/database/database.sqlite
        echo "Database created at ${{ github.workspace }}/database/database.sqlite"
  
    # Step 10: Run migrations
    - name: Run Migrations
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: ${{ github.workspace }}/database/database.sqlite # Use absolute path
      run: |
        php artisan migrate --force
        echo "Migrations completed."

    # Step 11: Run seeders
    - name: Run Seeders
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: ${{ github.workspace }}/database/database.sqlite # Use absolute path
      run: php artisan db:seed --force

    # Step 12: Generate application key
    - name: Generate key
      run: php artisan key:generate

    # Step 13: Set directory permissions for storage and cache
    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache

    # Step 14: Run tests (Unit and Feature tests) using PHPUnit/Pest
    - name: Run Tests
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: ${{ github.workspace }}/database/database.sqlite # Use absolute path
      run: php artisan test

    # Step 15: Clear Cache (Optional: If needed for cleanup after tests)
    - name: Clear Cache
      run: php artisan cache:clear

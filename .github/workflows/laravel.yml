name: Laravel CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  laravel-tests:
    runs-on: ubuntu-22.04-large  # You can use ubuntu-latest if you don't need a larger runner

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_DATABASE: coreui_db  # Change to your database name
          MYSQL_ROOT_PASSWORD: secret   # Change to your root password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost" 
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    # Step 1: Set up PHP 8.2 (required for Laravel 11)
    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, bcmath, pdo_mysql  # Add pdo_mysql for MySQL support

    # Step 2: Check out the repository code
    - uses: actions/checkout@v4

    # Step 3: Cache Composer dependencies for faster builds
    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: vendor
        key: composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          composer-

    # Step 4: Cache NPM dependencies for faster builds
    - name: Cache NPM dependencies
      uses: actions/cache@v3
      with:
        path: node_modules
        key: npm-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          npm-

    # Step 5: Copy .env.example to .env if .env doesn't exist
    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"

    # Step 6: Install Composer dependencies
    - name: Install Composer dependencies
      run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    # Step 7: Install NPM dependencies
    - name: Install NPM dependencies
      run: npm install

    # Step 8: Run NPM build (for assets)
    - name: Run NPM build
      run: npm run build

    # Step 9: Set Database Configuration
    - name: Update .env for MySQL
      run: |
        echo "DB_CONNECTION=mysql" >> .env
        echo "DB_HOST=127.0.0.1" >> .env
        echo "DB_PORT=3306" >> .env
        echo "DB_DATABASE=coreui_db" >> .env
        echo "DB_USERNAME=root" >> .env
        echo "DB_PASSWORD=secret" >> .env
        echo "CACHE_DRIVER=array" >> .env  # Set cache driver to array

    # Step 10: Wait for MySQL service to be healthy
    - name: Wait for MySQL
      run: |
        for i in {1..30}; do
          if mysql -h 127.0.0.1 -u root -psecret -e 'SELECT 1'; then
            break
          fi
          echo "Waiting for MySQL..."
          sleep 1
        done

    # Step 11: Run migrations
    - name: Run Migrations
      run: php artisan migrate --force
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: coreui_db
        DB_USERNAME: root
        DB_PASSWORD: secret

    # Step 12: Generate application key
    - name: Generate Key
      run: php artisan key:generate

    # Step 13: Set directory permissions for storage and cache
    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache

    # Step 14: Run seeders
    - name: Run Seeders
      run: php artisan db:seed --force
      env:
        DB_CONNECTION: mysql
        DB_DATABASE: coreui_db
        DB_USERNAME: root
        DB_PASSWORD: secret

    # Step 15: Run tests (Unit and Feature tests) using PHPUnit/Pest
    - name: Run Tests
      run: php artisan test
      env:
        DB_CONNECTION: mysql
        DB_DATABASE: coreui_db
        DB_USERNAME: root
        DB_PASSWORD: secret

    # Step 16: Clear Cache (Optional: If needed for cleanup after tests)
    - name: Clear Cache
      run: php artisan cache:clear
